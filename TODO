[stk]
    [X] Implement basic stackables (Address, Number, Text).
    [X] Remove boolean type (unnecessary).
    [ ] Create game types (Direction).

[vm]
    [X] Implement stack functions (PUSH, POP, DUP, SWAP).
    [X] Implement arithmetic functions (ADD, SUB, MUL, DIV, MOD).
    [X] Implement secondary memory functions (STO, RCL).
    [X] Implement comparisons (EQ, NE, GT, GE, LT, LE).
    [X] Implement jumps (JMP, JIT, JIF).
    [X] Correct jumps to work correcty with RVM.
    [X] Correct memory modules and print them in the debug.
    [X] Implement control syscalls (NOP, END).
    [X] Remove Stackable_ptr from Command constructor.
    [ ] Finish implementing syscalls.

[Positron]
    [X] Create scripts in Perl to parse Quark to C++.
    [X] Execute Quark programs on demand.
    [X] Make parser/quark automatically with Perl.
    [X] Add ifC in the Syntatic Base Tree.
    [X] Move recursive calls from visit method to visitors.
    [X] Add a solution to compilate ifC in Assembly.
    [X] Create directories needed to compile Perl.
    [X] Add guards against null pointers.
    [X] Create a tree for Syntatic Sugar.
    [X] Add pointers for construction in the Syntax trees.
    [ ] Remove Memory leak and solve memory management of trees.
    [ ] Implement Positron lexer/parser with Flex/Bison.
    [ ] Generate Syntatic Tree from the parser.
    [ ] Add Doxygen documentation in all Positron C++ code.

[option]
    [X] Create an option for debugging.
    [ ] Create a unique file for all game options.

[Main]
    [X] Integrate getopt.h lib/module to get options.

[Makefile]
    [X] Test compilation with test with libs.
    [X] Correct 'not found' for lib directory when no libs defined.
    [X] Implement auto compilation of Unit Tests.
    [X] Test assembly compilation.
    [X] Accept more than one source file directory.
    [X] Remove 'test' PHONY target.
    [X] Check directories to remove trailing bars.
    [X] Create internal-use variables for flags.
    [X] Create flag V to define a verbose mode.
    [X] Make possible to compile many binaries.
    [X] Support to more than one include file.
    [X] Adding external configuration file.
    [X] Finish comments on functions.
    [X] Test compilation of sbin and libexec binaries.
    [X] Deal with libraries with subdirectories.
    [X] Create flag MORE to output errors while tabbing.
    [X] Check for unidentified files to not delete them in clean's.
    [X] Add support to docs generated by Doxygen (Javadoc alike for C++).
    [X] Create vars to explore all .texi, .info, .ps, .html in DOCDIR.
    [X] Add install-info, install-html, install-ps, etc.
    [X] Complete installation target.
    [X] Add shortcuts to create new modules.
    [X] Create target 'standard' to put a project in the standard.
    [X] Add target to create automatically a .gitignore.
    [X] Add other package types (.tgz, .tar.bz2, .zip).
    [X] Link libraries respecting the rule of many executables.
    [X] Set 'mainteiner-clean' to remove dirs even with extra files.
    [X] Automatically link libraries in many library directories.
    [X] Add option to automatically create a Debian package.
    [X] Support Fortran compilation, linkage and lib generation.
    [X] Add AUXFILES variable to put additional files in package.
    [X] Add a MODULE in 'new' and 'delete', for header + directory.
    [X] Add variable FORTRAN_FILE to create a FORTRAN module with 'new'.
    [X] Make 'delete' work with files of any extension.
    [X] Add namespace when creating C++ in a subdirectory.
    [ ] Support Java compilation and generation of .jar.
    [ ] Add option to automatically create a RPM package.

[tests]
    [ ] Finish implementing unit tests for all files.

