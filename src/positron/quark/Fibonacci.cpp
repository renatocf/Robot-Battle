/**********************************************************************/
/* Copyright 2014 RCF                                                 */ 
/*                                                                    */
/* Licensed under the Apache License, Version 2.0 (the "License");    */
/* you may not use this file except in compliance with the License.   */
/* You may obtain a copy of the License at                            */
/*                                                                    */
/*     http://www.apache.org/licenses/LICENSE-2.0                     */
/*                                                                    */
/* Unless required by applicable law or agreed to in writing,         */
/* software distributed under the License is distributed on an        */
/* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,       */
/* either express or implied.                                         */
/* See the License for the specific language governing permissions    */
/* and limitations under the License.                                 */
/**********************************************************************/

// Default Libraries
#include <vector>
#include <iostream>

// Libraries
//#include "Stk.hpp"
#include "Int.hpp"
#include "Text.hpp"
#include "Address.hpp"
#include "Stackable.hpp"
#include "Fibonacci.hpp"
using namespace stk;

/**
 * <b>Parser for program sample/fibonacci.asm.</b>
 * This file is automatically 
 * generated by parser.pl
 * @author parser.pl
 */
vm::Prog parser::quark::upload_Fibonacci()
{
    using namespace vm;
    vm::Prog PROG;

    // Address variables
    Address adr1 { 0 };
    Address adr2 { 1 };
    Address adr3 { 2 };

    // Numerical variables
    Int num1 { 1 };
    Int num2 { 10 };
    Int num3 { 0 };

    // Textual variables
    stk::Text msg1 { "LOOP" };

    PROG.push_back( vm::Command { Command::Opcode::PUSH, num1         });
    PROG.push_back( vm::Command { Command::Opcode::DUP                });
    PROG.push_back( vm::Command { Command::Opcode::STO , adr1         });
    PROG.push_back( vm::Command { Command::Opcode::STO , adr2         });
    PROG.push_back( vm::Command { Command::Opcode::PUSH, num2         });
    PROG.push_back( vm::Command { Command::Opcode::STO , adr3         });
    PROG.push_back( vm::Command { Command::Opcode::RCL , adr1, "LOOP" });
    PROG.push_back( vm::Command { Command::Opcode::RCL , adr2         });
    PROG.push_back( vm::Command { Command::Opcode::DUP                });
    PROG.push_back( vm::Command { Command::Opcode::STO , adr1         });
    PROG.push_back( vm::Command { Command::Opcode::ADD                });
    PROG.push_back( vm::Command { Command::Opcode::DUP                });
    PROG.push_back( vm::Command { Command::Opcode::STO , adr2         });
    PROG.push_back( vm::Command { Command::Opcode::PRN                });
    PROG.push_back( vm::Command { Command::Opcode::RCL , adr3         });
    PROG.push_back( vm::Command { Command::Opcode::PUSH, num1         });
    PROG.push_back( vm::Command { Command::Opcode::SUB                });
    PROG.push_back( vm::Command { Command::Opcode::DUP                });
    PROG.push_back( vm::Command { Command::Opcode::STO , adr3         });
    PROG.push_back( vm::Command { Command::Opcode::PUSH, num3         });
    PROG.push_back( vm::Command { Command::Opcode::EQ                 });
    PROG.push_back( vm::Command { Command::Opcode::JIF , msg1         });
    PROG.push_back( vm::Command { Command::Opcode::END                });

    return PROG;
}

